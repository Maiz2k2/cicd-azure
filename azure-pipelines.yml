trigger:
- main  # Trigger on your main branch (or whichever branch you prefer)

pool:
  name: 'aks-pool'  # Your self-hosted AKS pool

variables:
  registry: 'maizmazin/vproappazure'  # Docker registry name
  registryCredential: 'dockerhub'    # Docker service connection name
  imageTag: 'V$(Build.BuildId)'      # Use build ID as image tag

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - script: |
        # Install Maven
        wget https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz
        sudo tar -xvzf apache-maven-3.9.9-bin.tar.gz -C /opt
        export MAVEN_HOME=/opt/apache-maven-3.9.9
        export PATH=$MAVEN_HOME/bin:$PATH  # Add Maven's bin directory to PATH
        mvn -v  # Verify Maven version
      displayName: 'Verify Maven Installation'

    - script: mvn clean install -DskipTests
      displayName: 'Maven Clean Install'

    - task: PublishBuildArtifacts@1
      displayName: 'Archive War Artifacts'
      inputs:
        pathToPublish: '**/target/*.war'
        artifactName: 'war-files'

- stage: UnitTests
  jobs:
  - job: UnitTests
    steps:
    - script: mvn test
      displayName: 'Run Unit Tests'

- stage: IntegrationTests
  jobs:
  - job: IntegrationTests
    steps:
    - script: mvn verify -DskipUnitTests
      displayName: 'Run Integration Tests'

- stage: CodeAnalysisCheckstyle
  jobs:
  - job: CodeAnalysisCheckstyle
    steps:
    - script: mvn checkstyle:checkstyle
      displayName: 'Run Checkstyle Analysis'

- stage: BuildAndPushDockerImage
  jobs:
  - job: BuildAndPushDockerImage
    steps:
    - script: |
        # Install Docker
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install -y docker-ce
        sudo usermod -aG docker $(whoami)  # Add current user to the docker group
        docker --version  # Verify Docker installation

        # Build the Docker image
        docker build -t $(registry):$(imageTag) .
      displayName: 'Build Docker Image'

    - script: |
        docker push $(registry):$(imageTag)
        docker push $(registry):latest
      displayName: 'Push Docker Image'

- stage: KubernetesDeploy
  jobs:
  - job: KubernetesDeploy
    pool:
      name: 'aks-pool' 
    steps:
    - task: AzureCLI@2
      displayName: 'Configure kubectl'
      inputs:
        azureSubscription: 'aks-service-conn'  # Azure service connection name
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group aks-demo-rg --name aks-demo-cluster 
    
    - script: |
        # Install Helm
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
        sudo apt-get install apt-transport-https --yes
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        sudo apt-get update
        sudo apt-get install helm
        helm version  # Verify Helm installation

        # Deploy using Helm
        helm upgrade --install --force vprofile-stack helm/vprofilecharts --set appimage=$(registry):$(imageTag) --namespace prod
      displayName: 'Deploy to Kubernetes with Helm'
