trigger:
  - main  # Trigger on your main branch

pool:
  name: 'aks-pool'  # Your self-hosted AKS pool

variables:
  registry: 'maizmazin/vproappazure'  # Docker registry name
  registryCredential: 'dockerhub'     # Docker service connection name
  imageTag: 'V$(Build.BuildId)'       # Use build ID as image tag

stages:
  - stage: Build
    jobs:
      - job: Build
        steps:
          - script: |
              echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_17_X64)"
              echo "##vso[task.setvariable variable=PATH]$(JAVA_HOME_17_X64)/bin:$(PATH)"
            displayName: "Set Java 17 Version"

          - task: Maven@4
            inputs:
              azureSubscription: 'aks-service-conn'
              mavenPomFile: 'pom.xml'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              sonarQubeRunAnalysis: false
            displayName: 'Set up Maven'

          - script: mvn clean install -DskipTests
            displayName: 'Build Project with Maven'

          - script: |
              # Verify WAR file exists in the target directory
              ls -R $(Build.SourcesDirectory)/target
              # Copy the WAR file to target2 directory for Docker usage
              mkdir -p $(Build.SourcesDirectory)/target2
              cp $(Build.SourcesDirectory)/target/vprofile-v2.war $(Build.SourcesDirectory)/target2/
            displayName: 'Verify and Copy WAR File to target2'

  - stage: BuildAndPushDockerImage
    jobs:
      - job: BuildAndPushDockerImage
        steps:
          - script: |
              docker build -t $(registry):$(imageTag) -t $(registry):latest .
            displayName: 'Build Docker Image'

          - script: |
              echo $(DOCKER_PASSWORD) | docker login --username $(DOCKER_USERNAME) --password-stdin
              docker push $(registry):$(imageTag)
              docker push $(registry):latest
            displayName: 'Push Docker Image'

  - stage: KubernetesDeploy
    jobs:
      - job: KubernetesDeploy
        steps:
          - task: AzureCLI@2
            displayName: 'Configure kubectl'
            inputs:
              azureSubscription: 'aks-service-conn'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group aks-demo-rg --name aks-demo-cluster

          - script: |
              helm upgrade --install --force vprofile-stack helm/vprofilecharts --set appimage=$(registry):$(imageTag) --namespace prod
            displayName: 'Deploy to Kubernetes with Helm'
