trigger:
  - main  # Trigger on your main branch (or whichever branch you prefer)

pool:
  name: 'aks-pool'  # Your self-hosted AKS pool

variables:
  registry: 'maizmazin/vproappazure'  # Docker registry name
  registryCredential: 'dockerhub'    # Docker service connection name
  imageTag: 'V$(Build.BuildId)'      # Use build ID as image tag

stages:
  - stage: SourcingEnvironment
    jobs:
      - job: SourcingEnvironment
        steps:
          - script: |
              source /etc/environment
            displayName: 'Source /etc/environment'

  - stage: Build
    jobs:
      - job: Build
        steps:
          - script: |
              echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_17_X64)"
              echo "##vso[task.setvariable variable=PATH]$(JAVA_HOME_17_X64)/bin:$(PATH)"
            displayName: "Set Java 17 Version"

          - task: Maven@4
            inputs:
              azureSubscription: 'aks-service-conn'
              mavenPomFile: 'pom.xml'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
            displayName: 'Set up Maven'

          - script: mvn -v  # Verify Maven installation
            displayName: 'Verify Maven Installation'

          - script: mvn clean install -DskipTests
            displayName: 'Maven Clean Install'

          # Add a debug step to verify file paths
          - script: |
              ls -R $(Build.SourcesDirectory)/target
            displayName: 'Verify War File Generation'

          # Archive war files
          - task: PublishBuildArtifacts@1
            displayName: 'Archive War Artifacts'
            inputs:
              pathToPublish: '$(Build.SourcesDirectory)/target/vprofile-v2/*.war'  # Adjusted path
              artifactName: 'war-files'

  - stage: UnitTests
    jobs:
      - job: UnitTests
        steps:
          - script: mvn test
            displayName: 'Run Unit Tests'

  - stage: IntegrationTests
    jobs:
      - job: IntegrationTests
        steps:
          - script: mvn verify -DskipUnitTests
            displayName: 'Run Integration Tests'

  - stage: CodeAnalysisCheckstyle
    jobs:
      - job: CodeAnalysisCheckstyle
        steps:
          - script: mvn checkstyle:checkstyle
            displayName: 'Run Checkstyle Analysis'

  - stage: BuildAndPushDockerImage
    jobs:
      - job: BuildAndPushDockerImage
        steps:
          - script: docker build -t $(registry):$(imageTag) .
            displayName: 'Build Docker Image'

          - script: |
              echo $(DOCKER_PASSWORD) | docker login --username $(DOCKER_USERNAME) --password-stdin
              docker push $(registry):$(imageTag)
              docker push $(registry):latest
            displayName: 'Push Docker Image'

  - stage: RemoveUnusedDockerImage
    jobs:
      - job: RemoveUnusedDockerImage
        steps:
          - script: |
              docker rmi $(registry):$(imageTag)
              docker rmi $(registry):$(imageTag)-old || true  # Ignore if image does not exist
            displayName: 'Remove Unused Docker Image'

  - stage: KubernetesDeploy
    jobs:
      - job: KubernetesDeploy
        pool:
          name: 'aks-pool'
        steps:
          - task: AzureCLI@2
            displayName: 'Configure kubectl'
            inputs:
              azureSubscription: 'aks-service-conn'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group aks-demo-rg --name aks-demo-cluster

          - script: |
              helm upgrade --install --force vprofile-stack helm/vprofilecharts --set appimage=$(registry):$(imageTag) --namespace prod
            displayName: 'Deploy to Kubernetes with Helm'
